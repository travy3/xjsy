<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd"
       default-lazy-init="true">

    <description>Shiro Configuration</description>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:xjsy.properties" />

    <!-- Shiro权限过滤过滤器定义 -->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                <!-- anon 匿名访问
                    authc 需要认证

                    perms[act:model:edit] 用户需要提供值为“act:model:edit”的Permission信息
                 -->

                ${adminPath}/login = authc
                ${adminPath}/logout = logout
                ${adminPath}/noauth = anon
                <!--${adminPath}/sys/role = roles[admin,qwe]-->
                ${adminPath}/** = user

            </value>
        </constructor-arg>
    </bean>

    <!-- 安全认证过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="${adminPath}/login" />
        <property name="successUrl" value="${adminPath}" />
        <property name="unauthorizedUrl" value="${adminPath}/noauth"></property>
        <property name="filters">
            <map>
                <!-- 基于表单验证的过滤器 -->
                <entry key="authc" value-ref="formAuthenticationFilter">
                </entry>
                <entry key="logout" value-ref="logoutFilter" />
            </map>
        </property>
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"/>
        </property>
    </bean>

    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/${adminPath}" />
    </bean>

    <bean id="formAuthenticationFilter" class="com.zyu.xjsy.modules.sys.security.FormAuthenticationFilter"></bean>

    <!-- CAS认证过滤器 -->
    <!--<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">-->
        <!--<property name="failureUrl" value="${adminPath}/login"/>-->
    <!--</bean>-->

    <!-- 定义Shiro安全管理配置 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--继承自RealmSecurityManager 单个realm 多个reamls -->
        <property name="realm" ref="systemAuthorizingRealm" />
        <!--继承自AuthenticatingSecurityManager 配置Authenticator 默认ModularRealmAuthenticator
            ModularRealmAuthenticator 调用AuthenticationStrategy进行多Realm身份验证（默认AtLeastOneSuccessfulStrategy）
            传入token realm 进行认证
        -->

        <!--<property name="authenticator" ref=""></property>-->
        <!--继承自AuthorizingSecurityManager 配置authorizer 默认ModularRealmAuthorizer-->
        <!--<property name="authorizer" ref="modularRealmAuthorizer"></property>-->
        <property name="sessionManager" ref="sessionManager" />
        <!-- 为了减少数据库压力 添加了缓存机制 shiroCacheManager 是 Shiro 对缓存框架 EhCache 的配置 -->
        <property name="cacheManager" ref="shiroCacheManager" />
    </bean>
    <bean id="systemAuthorizingRealm" class="com.zyu.xjsy.modules.sys.security.SystemAuthorizingRealm"></bean>
    <bean id="modularRealmAuthorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer"></bean>

    <!-- 自定义会话管理配置 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO"/>

        <!-- 会话超时时间，单位：毫秒  -->
        <property name="globalSessionTimeout" value="${session.sessionTimeout}"/>

        <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
        <property name="sessionValidationInterval" value="${session.sessionTimeoutClean}"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>

        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <!--设置会话监听器-->
        <!--<property name="sessionListeners"></property>-->
    </bean>

    <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
        当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="xjsy.session.id"/>
    </bean>

    <!-- 自定义Session存储容器 -->
    <!-- 	<bean id="sessionDAO" class="com.thinkgem.jeesite.common.security.shiro.session.JedisSessionDAO"> -->
    <!-- 		<property name="sessionIdGenerator" ref="idGen" /> -->
    <!-- 		<property name="sessionKeyPrefix" value="${redis.keyPrefix}_session_" /> -->
    <!-- 	</bean> -->
    <bean id="sessionDAO" class="com.zyu.xjsy.common.security.shiro.session.EhCacheSessionDAO">
        <property name="sessionIdGenerator" ref="idGen" />
        <property name="activeSessionsCacheName" value="activeSessionsCache" />
        <property name="cacheManager" ref="EhCacheManager" />
    </bean>

    <!-- 定义授权缓存管理器 -->
     	<!--<bean id="shiroCacheManager" class="com.thinkgem.jeesite.common.security.shiro.cache.SessionCacheManager" /> -->
    <bean id="EhCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!--<property name="cacheManagerConfigFile" ref="classpath:${ehcache.configFile}"/>-->
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- AOP式方法级权限检查  -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>